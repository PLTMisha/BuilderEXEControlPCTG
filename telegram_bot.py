import os
import sys
import time
import json
import uuid
import zipfile
import tempfile
import shutil
import threading
import logging
import subprocess
import requests
import zipfile
from pathlib import Path
from datetime import datetime
import secrets
import string
import os
import sys
import tempfile
import shutil
import subprocess
import logging


from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, CallbackQueryHandler


GENERATOR_BOT_TOKEN = "8229458291:AAEwZx3C0o1qq4vYTHFzCreGpFVtytEFo_E"  
ADMIN_CHAT_ID = 5450404463  


USERS_DATA_FILE = "users_data.json"


logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler("generator_bot.log"),
        logging.StreamHandler(sys.stdout)
    ]
)


users_data = {}

def load_users_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    global users_data
    try:
        if os.path.exists(USERS_DATA_FILE):
            with open(USERS_DATA_FILE, 'r', encoding='utf-8') as f:
                users_data = json.load(f)
            logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ {len(users_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        users_data = {}

def save_users_data():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        with open(USERS_DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(users_data, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return False

def generate_password(length=12):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å"""
    alphabet = string.ascii_letters + string.digits
    return ''.join(secrets.choice(alphabet) for _ in range(length))

def get_user_data(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return users_data.get(str(user_id), {})

def set_user_data(user_id, data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    users_data[str(user_id)] = data
    save_users_data()

def start_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    username = update.effective_user.username or "Unknown"
    
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} ({user_id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    
    keyboard = [
        [KeyboardButton("üìã –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã")],
        [KeyboardButton("üîë –í–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")],
        [KeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä PC Controller!

–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞—Å—Ç –¥–ª—è –≤–∞—Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º —á–µ—Ä–µ–∑ Telegram.

üìã –ù–∞–∂–º–∏—Ç–µ "–§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã", —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
üîë –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã

‚ö†Ô∏è –í–∞–∂–Ω–æ: –í–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather
    """
    
    update.message.reply_text(welcome_text, reply_markup=reply_markup)

def functions_handler(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    functions_text = """
üìã –í–û–ó–ú–û–ñ–ù–û–°–¢–ò PC CONTROLLER

üñ•Ô∏è –°–ò–°–¢–ï–ú–ê:
‚Ä¢ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –°–º–µ–Ω–∞ –æ–±–æ–µ–≤ —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç—å—é –∏ –≥—Ä–æ–º–∫–æ—Å—Ç—å—é
‚Ä¢ –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã

üìÇ –§–ê–ô–õ–´:
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–ø–æ–∫
‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫
‚Ä¢ –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤

üì° –°–ï–¢–¨:
‚Ä¢ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
‚Ä¢ Ping —Ö–æ—Å—Ç–æ–≤
‚Ä¢ –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞

üì∏ –ú–ï–î–ò–ê:
‚Ä¢ –°–∫—Ä–∏–Ω—à–æ—Ç—ã —ç–∫—Ä–∞–Ω–∞
‚Ä¢ –ó–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞
‚Ä¢ –§–æ—Ç–æ –∏ –≤–∏–¥–µ–æ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
‚Ä¢ Live-—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º

‚å®Ô∏è –í–í–û–î:
‚Ä¢ –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ
‚Ä¢ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
‚Ä¢ –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏

üîä –ó–í–£–ö:
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å—é
‚Ä¢ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ/–ø–∞—É–∑–∞
‚Ä¢ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤

‚öôÔ∏è –ú–û–ù–ò–¢–û–†–ò–ù–ì:
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
‚Ä¢ –ì—Ä–∞—Ñ–∏–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ CPU/RAM
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
‚Ä¢ –õ–æ–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–∫–æ–Ω

üñ•Ô∏è –ü–†–û–ì–†–ê–ú–ú–´:
‚Ä¢ –ó–∞–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–≥—Ä–∞–º–º

üåê –£–î–ê–õ–ï–ù–ù–´–ô –î–û–°–¢–£–ü:
‚Ä¢ –í–µ–±-–ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ngrok –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
‚Ä¢ –ó–∞—â–∏—Ç–∞ –ø–∞—Ä–æ–ª–µ–º
    """
    
    keyboard = [
        [KeyboardButton("üîë –í–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")],
        [KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    update.message.reply_text(functions_text, reply_markup=reply_markup)

def token_input_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞"""
    user_id = update.effective_user.id
    user_data = get_user_data(user_id)
    user_data['status'] = 'waiting_token'
    set_user_data(user_id, user_data)
    
    keyboard = [[KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    token_text = """
üîë –í–í–û–î –¢–û–ö–ï–ù–ê –ë–û–¢–ê

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞.

üìù –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω:
1. –ù–∞–ø–∏—à–∏—Ç–µ @BotFather –≤ Telegram
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /newbot
3. –í—ã–±–µ—Ä–∏—Ç–µ –∏–º—è –∏ username –¥–ª—è –±–æ—Ç–∞
4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω

‚ö†Ô∏è –¢–æ–∫–µ–Ω –∏–º–µ–µ—Ç –≤–∏–¥: 1234567890:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:
    """
    
    update.message.reply_text(token_text, reply_markup=reply_markup)

def validate_token(token):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞"""
    try:
        
        parts = token.split(':')
        if len(parts) != 2:
            return False
        
        bot_id = parts[0]
        bot_hash = parts[1]
        
        
        if not bot_id.isdigit():
            return False
        
        
        if len(bot_hash) < 20:
            return False
            
        
        url = f"https://api.telegram.org/bot{token}/getMe"
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            return data.get('ok', False)
        
        return False
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return False

def create_personalized_code(token, user_id):
    """–°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    try:
        
        with open('pc_controller_template.py', 'r', encoding='utf-8') as f:
            original_code = f.read()
        
        
        personalized_code = original_code.replace(
            'TOKEN = "8282388858:AAHYEEW3ebFolN1lyTCmVyps1v5z5DyTbVk"',
            f'TOKEN = "{token}"'
        ).replace(
            'OWNER_CHAT_ID = 5450404463',
            f'OWNER_CHAT_ID = {user_id}'
        )
        
        return personalized_code
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞: {e}")
        return None

def create_zip_package(user_id, token):
    """–°–æ–∑–¥–∞–µ—Ç ZIP-–ø–∞–∫–µ—Ç —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π"""
    try:
        
        temp_dir = tempfile.mkdtemp(prefix=f"pc_controller_{user_id}_")
        
        
        personalized_code = create_personalized_code(token, user_id)
        if not personalized_code:
            return None, None
        
        
        main_file = os.path.join(temp_dir, 'main.py')
        with open(main_file, 'w', encoding='utf-8') as f:
            f.write(personalized_code)
        
        
        html_source = 'live_control.html'
        if os.path.exists(html_source):
            shutil.copy2(html_source, temp_dir)
        else:
            
            create_html_file(temp_dir)
        
        
        programs_file = os.path.join(temp_dir, 'user_programs.json')
        with open(programs_file, 'w', encoding='utf-8') as f:
            json.dump({}, f, ensure_ascii=False, indent=2)
        
        
        requirements_file = os.path.join(temp_dir, 'requirements.txt')
        create_requirements_file(requirements_file)
        
        
        readme_file = os.path.join(temp_dir, 'README.txt')
        create_readme_file(readme_file)
        
        
        password = generate_password()
        
        
        zip_path = os.path.join(temp_dir, f'PCController_{user_id}.zip')
        create_password_protected_zip(temp_dir, zip_path, password)
        
        return zip_path, password
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ZIP-–ø–∞–∫–µ—Ç–∞: {e}")
        return None, None

def create_html_file(temp_dir):
    """–°–æ–∑–¥–∞–µ—Ç HTML —Ñ–∞–π–ª –¥–ª—è live control"""
    html_content = '''<!DOCTYPE html>
<html>
<head>
    <title>PC Control Panel</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background: linear-gradient(135deg, 
        .container { max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 15px; box-shadow: 0 10px 30px rgba(0,0,0,0.3); }
        .controls { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 20px; }
        .control-group { background: 
        .control-group h3 { color: 
        button { padding: 12px 20px; margin: 5px; border: none; border-radius: 8px; cursor: pointer; font-weight: 600; transition: all 0.3s ease; }
        button:hover { transform: translateY(-2px); box-shadow: 0 5px 15px rgba(0,0,0,0.2); }
        .mouse-btn { background: linear-gradient(45deg, 
        .kbd-btn { background: linear-gradient(45deg, 
        
        .status { padding: 15px; background: linear-gradient(45deg, 
        input[type="text"] { width: 200px; padding: 8px 12px; border: 2px solid 
        input[type="text"]:focus { border-color: 
    </style>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.4/socket.io.js"></script>
</head>
<body>
    <div class="container">
        <h1 style="text-align: center; color: 
        <div class="status" id="status">üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...</div>
        
        <div class="controls">
            <div class="control-group">
                <h3>üñ±Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à—å—é</h3>
                <button class="mouse-btn" onclick="mouseAction('left')">üëÜ –õ–µ–≤—ã–π –∫–ª–∏–∫</button>
                <button class="mouse-btn" onclick="mouseAction('right')">üëá –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫</button>
                <button class="mouse-btn" onclick="mouseAction('double')">‚ö° –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫</button>
                <br>
                <div style="text-align: center; margin-top: 10px;">
                    <button class="mouse-btn" onclick="mouseAction('up')" style="display: block; margin: 5px auto;">‚¨ÜÔ∏è</button>
                    <div>
                        <button class="mouse-btn" onclick="mouseAction('left_move')" style="display: inline-block;">‚¨ÖÔ∏è</button>
                        <button class="mouse-btn" onclick="mouseAction('right_move')" style="display: inline-block;">‚û°Ô∏è</button>
                    </div>
                    <button class="mouse-btn" onclick="mouseAction('down')" style="display: block; margin: 5px auto;">‚¨áÔ∏è</button>
                </div>
            </div>
            
            <div class="control-group">
                <h3>‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞</h3>
                <div style="margin-bottom: 15px;">
                    <input type="text" id="textInput" placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≤–≤–æ–¥–∞...">
                    <button class="kbd-btn" onclick="typeText()">üìù –í–≤–µ—Å—Ç–∏</button>
                </div>
                <button class="kbd-btn" onclick="keyAction('enter')">‚èé Enter</button>
                <button class="kbd-btn" onclick="keyAction('esc')">‚éã Escape</button>
                <button class="kbd-btn" onclick="keyAction('tab')">‚á• Tab</button>
                <button class="kbd-btn" onclick="keyAction('space')">‚ê£ –ü—Ä–æ–±–µ–ª</button>
            </div>
        </div>
        
        <div style="text-align: center; margin-top: 20px;">
            <h3>üñ•Ô∏è –≠–∫—Ä–∞–Ω –∫–æ–º–ø—å—é—Ç–µ—Ä–∞</h3>
            <img id="screen" src="/stream?pw={{ pw }}" alt="Desktop Stream" onload="this.style.opacity=1" style="opacity:0; transition: opacity 0.3s;">
        </div>
    </div>

    <script>
        const socket = io();
        const status = document.getElementById('status');
        
        socket.on('connect', function() {
            status.innerHTML = '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É';
            status.style.background = 'linear-gradient(45deg, 
        });
        
        socket.on('disconnect', function() {
            status.innerHTML = '‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ';
            status.style.background = 'linear-gradient(45deg, 
        });
        
        function mouseAction(action) {
            fetch('/api/mouse?pw={{ pw }}', {
                method: 'POST',
                headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                body: 'action=' + action
            }).catch(console.error);
        }
        
        function keyAction(action) {
            fetch('/api/keyboard?pw={{ pw }}', {
                method: 'POST',
                headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                body: 'action=' + action
            }).catch(console.error);
        }
        
        function typeText() {
            const text = document.getElementById('textInput').value;
            if (text.trim()) {
                fetch('/api/keyboard?pw={{ pw }}', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                    body: 'action=type&text=' + encodeURIComponent(text)
                }).catch(console.error);
                document.getElementById('textInput').value = '';
            }
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
        let updateInterval = 200; // –Ω–∞—á–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        function updateScreen() {
            const img = document.getElementById('screen');
            const newSrc = '/stream?pw={{ pw }}&t=' + Date.now();
            img.src = newSrc;
        }
        
        setInterval(updateScreen, updateInterval);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        document.addEventListener('keydown', function(e) {
            if (e.target.tagName !== 'INPUT') {
                e.preventDefault();
                let key = e.key;
                if (key === ' ') key = 'space';
                if (key === 'Enter') key = 'enter';
                if (key === 'Escape') key = 'esc';
                keyAction(key);
            }
        });
        
        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à—å—é –ø–æ –∫–ª–∏–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        document.getElementById('screen').addEventListener('click', function(e) {
            const rect = this.getBoundingClientRect();
            const x = Math.round((e.clientX - rect.left) / rect.width * 100);
            const y = Math.round((e.clientY - rect.top) / rect.height * 100);
            
            fetch('/api/mouse?pw={{ pw }}', {
                method: 'POST',
                headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                body: `action=click&x=${x}&y=${y}`
            }).catch(console.error);
        });
    </script>
</body>
</html>'''
    
    html_file = os.path.join(temp_dir, 'live_control.html')
    with open(html_file, 'w', encoding='utf-8') as f:
        f.write(html_content)
    logging.info("HTML —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω")

def create_requirements_file(file_path):
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª requirements.txt"""
    requirements = '''pyautogui==0.9.54
opencv-python==4.8.1.78
numpy==1.24.3
mss==9.0.1
Pillow==10.0.1
psutil==5.9.6
python-telegram-bot==13.15
requests==2.31.0
pyngrok==7.0.0
Flask==2.3.3
Flask-SocketIO==5.3.6
watchdog==3.0.0
pywin32==306
speedtest-cli==2.1.3
scipy==1.11.4
sounddevice==0.4.6
pyperclip==1.8.2
aiortc==1.6.0
av==10.0.0
PyInstaller==6.2.0
pyzmq==25.1.1
websocket-client==1.6.4
python-dateutil==2.8.2'''
    
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(requirements)
    logging.info("Requirements —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω")

def create_readme_file(file_path):
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π"""
    readme_content = """
ü§ñ PC CONTROLLER - –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –£–°–¢–ê–ù–û–í–ö–ï

üìã –°–û–î–ï–†–ñ–ò–ú–û–ï –ê–†–•–ò–í–ê:
‚Ä¢ main.py - –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
‚Ä¢ live_control.html - –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
‚Ä¢ user_programs.json - —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º
‚Ä¢ requirements.txt - —Å–ø–∏—Å–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
‚Ä¢ README.txt - –¥–∞–Ω–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è

üîß –£–°–¢–ê–ù–û–í–ö–ê:

1Ô∏è‚É£ –£–°–¢–ê–ù–û–í–ö–ê PYTHON:
   ‚Ä¢ –°–∫–∞—á–∞–π—Ç–µ Python 3.8+ —Å https://python.org
   ‚Ä¢ –ü—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–º–µ—Ç—å—Ç–µ "Add to PATH"

2Ô∏è‚É£ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô:
   ‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É (Win+R, cmd)
   ‚Ä¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–∞–ø–∫—É —Å —Ñ–∞–π–ª–∞–º–∏: cd "–ø—É—Ç—å_–∫_–ø–∞–ø–∫–µ"
   ‚Ä¢ –í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install -r requirements.txt

3Ô∏è‚É£ –ó–ê–ü–£–°–ö –ü–†–û–ì–†–ê–ú–ú–´:
   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py
   ‚Ä¢ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –¥–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –ø–æ main.py

üöÄ –ü–ï–†–í–´–ô –ó–ê–ü–£–°–ö:
   ‚Ä¢ –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å–æ–∑–¥–∞—Å—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã
   ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start —Å–≤–æ–µ–º—É –±–æ—Ç—É –≤ Telegram
   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º

üîê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:
   ‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –≤–∞—à–∏–º Telegram ID
   ‚Ä¢ –í—Å–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∑–∞—â–∏—â–µ–Ω—ã –ø–∞—Ä–æ–ª–µ–º
   ‚Ä¢ –ü—Ä–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø

‚öôÔ∏è –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò:
   ‚Ä¢ –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ngrok
   ‚Ä¢ –î–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –¥–æ–±–∞–≤—å—Ç–µ –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É Windows
   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ user_programs.json

üÜò –†–ï–®–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú:
   ‚Ä¢ –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö —É—Å—Ç–∞–Ω–æ–≤–∫–∏: pip install --upgrade pip
   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å pywin32: pip install --force-reinstall pywin32
   ‚Ä¢ –ê–Ω—Ç–∏–≤–∏—Ä—É—Å –±–ª–æ–∫–∏—Ä—É–µ—Ç: –¥–æ–±–∞–≤—å—Ç–µ –ø–∞–ø–∫—É –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è

üìû –ü–û–î–î–ï–†–ñ–ö–ê:
   –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞.

‚úÖ –ì–û–¢–û–í–û! –í–∞—à PC Controller –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!
"""
    
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(readme_content)
    logging.info("README —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω")

def create_password_protected_zip(source_dir, zip_path, password):
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞—â–∏—â–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª–µ–º ZIP –∞—Ä—Ö–∏–≤"""
    try:
        import pyminizip
        
        
        files_to_zip = []
        for root, dirs, files in os.walk(source_dir):
            for file in files:
                if file != os.path.basename(zip_path):  
                    file_path = os.path.join(root, file)
                    arc_name = os.path.relpath(file_path, source_dir)
                    files_to_zip.append((file_path, arc_name))
        
        
        pyminizip.compress_multiple(
            [f[0] for f in files_to_zip],  
            [f[1] for f in files_to_zip],  
            zip_path,                      
            password,                      
            5                             
        )
        
        return True
        
    except ImportError:
        
        logging.warning("pyminizip –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å–æ–∑–¥–∞–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–π ZIP –±–µ–∑ –ø–∞—Ä–æ–ª—è")
        
        with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for root, dirs, files in os.walk(source_dir):
                for file in files:
                    if file != os.path.basename(zip_path):
                        file_path = os.path.join(root, file)
                        arc_name = os.path.relpath(file_path, source_dir)
                        zipf.write(file_path, arc_name)
        
        return False
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ZIP: {e}")
        return False

def build_exe_for_user(user_id, token, temp_dir):
    """–°–æ–±–∏—Ä–∞–µ—Ç EXE —Ñ–∞–π–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        logging.info(f"–ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä–∫—É EXE –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        
        try:
            import PyInstaller
            logging.info(f"PyInstaller –Ω–∞–π–¥–µ–Ω: –≤–µ—Ä—Å–∏—è {PyInstaller.__version__}")
        except ImportError:
            logging.error("PyInstaller –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            return None
        
        
        spec_content = f'''

import os
import sys

block_cipher = None


pathex = [r'{temp_dir}']


datas = [
    (r'{temp_dir}/live_control.html', '.'),
    (r'{temp_dir}/user_programs.json', '.'),
]


hiddenimports = [
    'pkg_resources.py2_warn',
    'telegram',
    'telegram.ext',
    'telegram.ext.updater',
    'telegram.ext.commandhandler',
    'telegram.ext.messagehandler',
    'telegram.ext.callbackqueryhandler',
    'pyautogui',
    'cv2',
    'numpy',
    'PIL',
    'PIL.Image',
    'PIL.ImageGrab',
    'mss',
    'psutil',
    'requests',
    'json',
    'base64',
    'threading',
    'subprocess',
    'os',
    'sys',
    'time',
    'io',
    'tempfile',
    'pathlib',
    'logging',
    'socket',
    'urllib.request',
    'urllib.parse',
]


if sys.platform.startswith('win'):
    hiddenimports.extend([
        'win32gui',
        'win32con',
        'win32api',
        'win32process',
        'winsound',
    ])


excludes = [
    'tkinter',
    'matplotlib',
    'IPython',
    'jupyter',
    'notebook',
    'scipy.spatial.cKDTree',
    'scipy.sparse.csgraph._validation',
]

a = Analysis(
    [r'{temp_dir}/main.py'],
    pathex=pathex,
    binaries=[],
    datas=datas,
    hiddenimports=hiddenimports,
    hookspath=[],
    hooksconfig={{}},
    runtime_hooks=[],
    excludes=excludes,
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    [],
    exclude_binaries=True,
    name='PCController_{user_id}',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    console=True,  
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
)

coll = COLLECT(
    exe,
    a.binaries,
    a.zipfiles,
    a.datas,
    strip=False,
    upx=True,
    upx_exclude=[],
    name='PCController_{user_id}',
)
'''
        
        spec_path = os.path.join(temp_dir, 'pc_controller.spec')
        with open(spec_path, 'w', encoding='utf-8') as f:
            f.write(spec_content)
        
        logging.info(f"Spec —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {spec_path}")
        
        
        requirements_content = '''pyautogui==0.9.54
opencv-python==4.8.1.78
numpy==1.24.3
mss==9.0.1
Pillow==10.0.1
psutil==5.9.6
python-telegram-bot==13.15
requests==2.31.0
PyInstaller==6.2.0'''
        
        req_path = os.path.join(temp_dir, 'requirements.txt')
        with open(req_path, 'w') as f:
            f.write(requirements_content)
        
        
        old_cwd = os.getcwd()
        os.chdir(temp_dir)
        
        try:
            logging.info("–ó–∞–ø—É—Å–∫–∞—é PyInstaller...")
            
            
            cmd = [
                sys.executable, '-m', 'PyInstaller',
                '--clean',
                '--noconfirm',
                '--log-level=DEBUG',  
                'pc_controller.spec'
            ]
            
            logging.info(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=1200,  
                cwd=temp_dir
            )
            
            logging.info(f"PyInstaller return code: {result.returncode}")
            
            if result.stdout:
                logging.info(f"PyInstaller stdout:\n{result.stdout[-2000:]}")  
            
            if result.stderr:
                logging.error(f"PyInstaller stderr:\n{result.stderr[-2000:]}")
            
            if result.returncode == 0:
                
                possible_paths = [
                    os.path.join(temp_dir, 'dist', f'PCController_{user_id}', f'PCController_{user_id}.exe'),
                    os.path.join(temp_dir, 'dist', f'PCController_{user_id}.exe'),
                    os.path.join(temp_dir, 'dist', 'PCController', 'PCController.exe')
                ]
                
                for exe_path in possible_paths:
                    if os.path.exists(exe_path):
                        size_mb = os.path.getsize(exe_path) / (1024 * 1024)
                        logging.info(f"EXE –Ω–∞–π–¥–µ–Ω: {exe_path}, —Ä–∞–∑–º–µ—Ä: {size_mb:.1f} MB")
                        return exe_path
                
                
                dist_dir = os.path.join(temp_dir, 'dist')
                if os.path.exists(dist_dir):
                    for root, dirs, files in os.walk(dist_dir):
                        for file in files:
                            if file.endswith('.exe'):
                                exe_path = os.path.join(root, file)
                                logging.info(f"–ù–∞–π–¥–µ–Ω EXE —Ñ–∞–π–ª: {exe_path}")
                                return exe_path
                
                logging.error("EXE —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Å–±–æ—Ä–∫–∏")
                logging.info(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ dist: {os.listdir(dist_dir) if os.path.exists(dist_dir) else 'dist –Ω–µ –Ω–∞–π–¥–µ–Ω'}")
                return None
                
            else:
                logging.error(f"PyInstaller –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π {result.returncode}")
                return None
                
        finally:
            os.chdir(old_cwd)
            
    except subprocess.TimeoutExpired:
        logging.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Å–±–æ—Ä–∫–µ EXE")
        return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ EXE: {str(e)}")
        logging.exception("–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:")
        return None

def test_exe_build():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–±–æ—Ä–∫–∏ EXE"""
    import tempfile
    import shutil
    
    logging.basicConfig(level=logging.INFO)
    
    
    temp_dir = tempfile.mkdtemp(prefix="exe_test_")
    
    try:
        
        test_code = '''
import sys
import os

def main():
    print("Hello from EXE!")
    input("Press Enter to exit...")

if __name__ == "__main__":
    main()
'''
        
        main_path = os.path.join(temp_dir, 'main.py')
        with open(main_path, 'w') as f:
            f.write(test_code)
        
        
        with open(os.path.join(temp_dir, 'live_control.html'), 'w') as f:
            f.write('<html><body>Test</body></html>')
        
        with open(os.path.join(temp_dir, 'user_programs.json'), 'w') as f:
            f.write('{}')
        
        
        exe_path = build_exe_for_user("test", "test_token", temp_dir)
        
        if exe_path:
            print(f"‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω! EXE —Å–æ–∑–¥–∞–Ω: {exe_path}")
            return True
        else:
            print("‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω!")
            return False
            
    finally:
        shutil.rmtree(temp_dir, ignore_errors=True)

def diagnose_system():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –Ω–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Å–±–æ—Ä–∫–µ EXE"""
    issues = []
    
    try:
        import PyInstaller
        print(f"‚úÖ PyInstaller: {PyInstaller.__version__}")
    except ImportError:
        issues.append("‚ùå PyInstaller –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    try:
        import telegram
        print(f"‚úÖ python-telegram-bot: {telegram.__version__}")
    except ImportError:
        issues.append("‚ùå python-telegram-bot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    
    import psutil
    memory_gb = psutil.virtual_memory().available / (1024**3)
    if memory_gb < 2:
        issues.append(f"‚ö†Ô∏è –ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–π –ø–∞–º—è—Ç–∏: {memory_gb:.1f} GB")
    else:
        print(f"‚úÖ –°–≤–æ–±–æ–¥–Ω–æ–π –ø–∞–º—è—Ç–∏: {memory_gb:.1f} GB")
    
    
    if diagnose_f_drive():
        print("‚úÖ –î–∏—Å–∫ F: –≥–æ—Ç–æ–≤ –¥–ª—è —Å–±–æ—Ä–∫–∏")
    else:
        issues.append("‚ùå –î–∏—Å–∫ F: –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è —Å–±–æ—Ä–∫–∏")
    
    if issues:
        print("\nüîß –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:")
        for issue in issues:
            print(issue)
        return False
    else:
        print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Å–±–æ—Ä–∫–µ EXE –Ω–∞ –¥–∏—Å–∫–µ F:")
        return True
def setup_f_drive_build():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞ F: –¥–ª—è —Å–±–æ—Ä–∫–∏"""
    
    
    f_build_dir = "F:/PCController_Build"
    f_temp_dir = "F:/temp"
    
    
    os.makedirs(f_build_dir, exist_ok=True)
    os.makedirs(f_temp_dir, exist_ok=True)
    
    
    os.environ['PYINSTALLER_CONFIG_DIR'] = f_build_dir
    os.environ['TMPDIR'] = f_temp_dir  
    os.environ['TEMP'] = f_temp_dir    
    os.environ['TMP'] = f_temp_dir     
    
    logging.info(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Å–±–æ—Ä–∫–∞ –Ω–∞ –¥–∏—Å–∫–µ F:")
    logging.info(f"–†–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞: {f_build_dir}")
    logging.info(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞: {f_temp_dir}")
    
    return f_build_dir, f_temp_dir

def create_f_temp_dir(prefix="pc_controller_"):
    """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –Ω–∞ –¥–∏—Å–∫–µ F:"""
    f_temp_base = "F:/temp"
    os.makedirs(f_temp_base, exist_ok=True)
    
    import uuid
    unique_id = str(uuid.uuid4())[:8]
    temp_dir = os.path.join(f_temp_base, f"{prefix}{unique_id}")
    os.makedirs(temp_dir, exist_ok=True)
    
    return temp_dir

def build_exe_for_user_f_drive_nuitka(user_id, token, use_f_drive=True):
    """–°–æ–±–∏—Ä–∞–µ—Ç EXE —Ñ–∞–π–ª —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Nuitka –Ω–∞ –¥–∏—Å–∫–µ F:"""
    try:
        logging.info(f"–ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä–∫—É EXE —Å Nuitka –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        
        try:
            result = subprocess.run([sys.executable, '-c', 'import nuitka; print(nuitka.__version__)'], 
                                  capture_output=True, text=True, timeout=30)
            if result.returncode == 0:
                logging.info(f"Nuitka –≤–µ—Ä—Å–∏—è: {result.stdout.strip()}")
            else:
                logging.info("Nuitka –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é...")
                subprocess.run([sys.executable, '-m', 'pip', 'install', 'nuitka'], 
                             check=True, capture_output=True, timeout=180)
                logging.info("Nuitka —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å Nuitka: {e}")
            return None
        
        
        if use_f_drive:
            f_build_dir, f_temp_dir = setup_f_drive_build()
            temp_dir = create_f_temp_dir(f"nuitka_build_{user_id}_")
        else:
            temp_dir = tempfile.mkdtemp(prefix=f"nuitka_{user_id}_")
            f_temp_dir = tempfile.gettempdir()
        
        logging.info(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞: {temp_dir}")
        
        
        personalized_code = create_personalized_code(token, user_id)
        if not personalized_code:
            return None
        
        main_file = os.path.join(temp_dir, 'main.py')
        with open(main_file, 'w', encoding='utf-8') as f:
            f.write(personalized_code)
        
        
        create_html_file(temp_dir)
        
        programs_file = os.path.join(temp_dir, 'user_programs.json')
        with open(programs_file, 'w', encoding='utf-8') as f:
            import json
            json.dump({}, f, ensure_ascii=False, indent=2)
        
        
        output_dir = os.path.join(temp_dir, 'output')
        os.makedirs(output_dir, exist_ok=True)
        
        cmd = [
            sys.executable, '-m', 'nuitka',
            '--standalone',  
            '--assume-yes-for-downloads',
            '--output-dir=' + output_dir,
            '--windows-console-mode=attach',
            
            
            '--include-module=telegram',
            '--include-module=pyautogui',
            '--include-module=cv2',
            '--include-module=numpy',
            '--include-module=PIL',
            '--include-module=psutil',
            '--include-module=requests',
            
            
            '--include-data-files=' + os.path.join(temp_dir, 'live_control.html') + '=live_control.html',
            '--include-data-files=' + os.path.join(temp_dir, 'user_programs.json') + '=user_programs.json',
            
            main_file
        ]
        
        logging.info("–ó–∞–ø—É—Å–∫–∞—é Nuitka (—É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é)...")
        logging.info(f"–†–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞: {temp_dir}")
        
        
        full_cmd = ' '.join(cmd)
        logging.info(f"–ü–æ–ª–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ Nuitka: {full_cmd}")
        
        
        result = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            timeout=600,  
            cwd=temp_dir,
            env=os.environ.copy()
        )
        
        logging.info(f"Nuitka return code: {result.returncode}")
        
        
        if result.stdout:
            logging.info(f"Nuitka STDOUT:\n{result.stdout}")
        
        if result.stderr:
            logging.error(f"Nuitka STDERR:\n{result.stderr}")
        
        if result.returncode == 0:
            
            main_name = os.path.splitext(os.path.basename(main_file))[0]
            exe_folder = os.path.join(output_dir, main_name + '.dist')
            exe_path = os.path.join(exe_folder, main_name + '.exe')
            
            if os.path.exists(exe_path):
                size_mb = os.path.getsize(exe_path) / (1024 * 1024)
                logging.info(f"EXE —Å–æ–∑–¥–∞–Ω: {exe_path}, —Ä–∞–∑–º–µ—Ä: {size_mb:.1f} MB")
                
                
                zip_path = os.path.join(temp_dir, f'PCController_{user_id}_nuitka.zip')
                with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                    for root, dirs, files in os.walk(exe_folder):
                        for file in files:
                            file_path = os.path.join(root, file)
                            arc_name = os.path.relpath(file_path, exe_folder)
                            zipf.write(file_path, arc_name)
                
                logging.info(f"–°–æ–∑–¥–∞–Ω ZIP —Å Nuitka —Å–±–æ—Ä–∫–æ–π: {zip_path}")
                return zip_path  
            else:
                
                for root, dirs, files in os.walk(output_dir):
                    for file in files:
                        if file.endswith('.exe'):
                            found_exe = os.path.join(root, file)
                            logging.info(f"–ù–∞–π–¥–µ–Ω EXE: {found_exe}")
                            return found_exe
                
                logging.error("EXE —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Å–±–æ—Ä–∫–∏ Nuitka")
                
                if os.path.exists(output_dir):
                    logging.info(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ {output_dir}:")
                    for item in os.listdir(output_dir):
                        item_path = os.path.join(output_dir, item)
                        if os.path.isdir(item_path):
                            logging.info(f"  –ü–∞–ø–∫–∞: {item}")
                            for sub_item in os.listdir(item_path):
                                logging.info(f"    {sub_item}")
                        else:
                            logging.info(f"  –§–∞–π–ª: {item}")
                return None
        else:
            logging.error(f"Nuitka –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π {result.returncode}")
            
            
            logging.info("–ü—Ä–æ–±—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É Nuitka...")
            simple_cmd = [
                sys.executable, '-m', 'nuitka',
                '--standalone',
                '--assume-yes-for-downloads',
                '--output-dir=' + output_dir,
                main_file
            ]
            
            simple_result = subprocess.run(
                simple_cmd,
                capture_output=True,
                text=True,
                timeout=300,
                cwd=temp_dir
            )
            
            if simple_result.returncode == 0:
                logging.info("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞!")
                
                for root, dirs, files in os.walk(output_dir):
                    for file in files:
                        if file.endswith('.exe'):
                            return os.path.join(root, file)
            else:
                logging.error(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞: {simple_result.stderr}")
            
            return None
            
    except subprocess.TimeoutExpired:
        logging.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Å–±–æ—Ä–∫–µ EXE —Å Nuitka")
        return None
    except Exception as e:
        logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ EXE —Å Nuitka: {str(e)}")
        return None
    
def test_nuitka_simple():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Nuitka —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º"""
    try:
        temp_dir = tempfile.mkdtemp(prefix="nuitka_test_")
        
        
        test_code = '''
import sys
print("Hello from Nuitka!")
input("Press Enter...")
'''
        
        test_file = os.path.join(temp_dir, 'test.py')
        with open(test_file, 'w') as f:
            f.write(test_code)
        
        
        cmd = [
            sys.executable, '-m', 'nuitka',
            '--standalone',
            '--assume-yes-for-downloads',
            test_file
        ]
        
        print(f"–¢–µ—Å—Ç–∏—Ä—É—é Nuitka –≤ –ø–∞–ø–∫–µ: {temp_dir}")
        print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
        
        result = subprocess.run(cmd, cwd=temp_dir, timeout=300)
        
        if result.returncode == 0:
            print("‚úÖ Nuitka —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return True
        else:
            print(f"‚ùå Nuitka –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∫–æ–¥: {result.returncode}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ Nuitka: {e}")
        return False
    finally:
        try:
            shutil.rmtree(temp_dir)
        except:
            pass

def diagnose_nuitka_issues():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å Nuitka –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è"""
    issues = []
    solutions = []
    
    print("=== –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Nuitka ===")
    
    
    python_version = sys.version_info
    print(f"Python –≤–µ—Ä—Å–∏—è: {python_version.major}.{python_version.minor}.{python_version.micro}")
    
    if python_version < (3, 7):
        issues.append("–°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è Python")
        solutions.append("–û–±–Ω–æ–≤–∏—Ç–µ Python –¥–æ –≤–µ—Ä—Å–∏–∏ 3.7+")
    
    
    try:
        result = subprocess.run([sys.executable, '-c', 'import nuitka; print(nuitka.__version__)'], 
                              capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print(f"‚úÖ Nuitka —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –≤–µ—Ä—Å–∏—è {result.stdout.strip()}")
        else:
            issues.append("Nuitka –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            solutions.append("–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip uninstall nuitka && pip install nuitka")
    except Exception as e:
        issues.append(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Nuitka: {e}")
        solutions.append("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Nuitka: pip install nuitka")
    
    
    try:
        
        result = subprocess.run(['where', 'cl'], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ MSVC –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω")
        else:
            
            result = subprocess.run(['where', 'gcc'], capture_output=True, text=True)
            if result.returncode == 0:
                print("‚úÖ GCC –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω")
            else:
                issues.append("C++ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                solutions.append("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Visual Studio Build Tools –∏–ª–∏ MinGW-w64")
    except Exception:
        issues.append("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä")
        solutions.append("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Visual Studio Build Tools")
    
    
    import psutil
    disk_usage = psutil.disk_usage('C:/')
    free_gb = disk_usage.free / (1024**3)
    
    if free_gb < 3:
        issues.append(f"–ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ C: ({free_gb:.1f} GB)")
        solutions.append("–û—Å–≤–æ–±–æ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 GB)")
    
    
    import ctypes
    try:
        is_admin = ctypes.windll.shell32.IsUserAnAdmin()
        if not is_admin:
            issues.append("–ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            solutions.append("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        else:
            print("‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –µ—Å—Ç—å")
    except:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    
    
    if issues:
        print("\n‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:")
        for i, issue in enumerate(issues, 1):
            print(f"  {i}. {issue}")
        
        print("\nüîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        for i, solution in enumerate(solutions, 1):
            print(f"  {i}. {solution}")
        
        return False
    else:
        print("\n‚úÖ Nuitka –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        return True
    
def fix_nuitka_install():
    """–ü—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É Nuitka"""
    try:
        print("–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ Nuitka...")
        
        
        subprocess.run([sys.executable, '-m', 'pip', 'uninstall', 'nuitka', '-y'], 
                      capture_output=True)
        
        
        subprocess.run([sys.executable, '-m', 'pip', 'install', '--upgrade', 'pip'], 
                      check=True, capture_output=True)
        
        
        subprocess.run([sys.executable, '-m', 'pip', 'install', 'nuitka'], 
                      check=True, capture_output=True)
        
        print("‚úÖ Nuitka –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
        return False


def fallback_to_pyinstaller_optimized(user_id, token, temp_dir):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è PyInstaller –µ—Å–ª–∏ Nuitka –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"""
    try:
        logging.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π PyInstaller –∫–∞–∫ fallback")
        
        
        spec_content = f'''

import sys
import os

block_cipher = None

a = Analysis(
    ['{temp_dir}/main.py'],
    pathex=['{temp_dir}'],
    binaries=[],
    datas=[
        ('{temp_dir}/live_control.html', '.'),
        ('{temp_dir}/user_programs.json', '.'),
    ],
    hiddenimports=[
        'telegram', 'telegram.ext',
        'pyautogui', 'cv2', 'numpy',
        'PIL', 'mss', 'psutil', 'requests'
    ],
    hookspath=[],
    hooksconfig={{}},
    runtime_hooks=[],
    excludes=['tkinter', 'matplotlib'],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='PCController_{user_id}',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=False,
    runtime_tmpdir=None,
    console=True,
)
'''
        
        spec_path = os.path.join(temp_dir, 'minimal.spec')
        with open(spec_path, 'w') as f:
            f.write(spec_content)
        
        cmd = [
            sys.executable, '-m', 'PyInstaller',
            '--clean', '--noconfirm',
            spec_path
        ]
        
        result = subprocess.run(cmd, cwd=temp_dir, timeout=300)
        
        if result.returncode == 0:
            exe_path = os.path.join(temp_dir, 'dist', f'PCController_{user_id}.exe')
            if os.path.exists(exe_path):
                return exe_path
        
        return None
        
    except Exception as e:
        logging.error(f"Fallback PyInstaller –æ—à–∏–±–∫–∞: {e}")
        return None

def check_and_install_nuitka():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Nuitka –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
    try:
        result = subprocess.run([sys.executable, '-c', 'import nuitka'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            logging.info("Nuitka —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
    except:
        pass
    
    try:
        logging.info("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Nuitka...")
        subprocess.run([sys.executable, '-m', 'pip', 'install', 'nuitka'], 
                     check=True, capture_output=True, timeout=120)
        logging.info("Nuitka —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Nuitka: {e}")
        return False

def cleanup_f_drive():
    """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞ –¥–∏—Å–∫–µ F:"""
    try:
        f_temp_dir = "F:/temp"
        if os.path.exists(f_temp_dir):
            
            import time
            current_time = time.time()
            
            for item in os.listdir(f_temp_dir):
                item_path = os.path.join(f_temp_dir, item)
                if os.path.isdir(item_path):
                    
                    created_time = os.path.getctime(item_path)
                    age_hours = (current_time - created_time) / 3600
                    
                    if age_hours > 24:  
                        try:
                            shutil.rmtree(item_path)
                            logging.info(f"–£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –ø–∞–ø–∫–∞: {item_path}")
                        except:
                            pass
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ F: –¥–∏—Å–∫–∞: {e}")

def diagnose_f_drive():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –¥–∏—Å–∫ F: –¥–ª—è —Å–±–æ—Ä–∫–∏"""
    try:
        
        if not os.path.exists("F:/"):
            print("‚ùå –î–∏—Å–∫ F: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        
        
        f_stats = shutil.disk_usage("F:/")
        f_free_gb = f_stats.free / (1024**3)
        f_total_gb = f_stats.total / (1024**3)
        
        print(f"‚úÖ –î–∏—Å–∫ F: –¥–æ—Å—Ç—É–ø–µ–Ω")
        print(f"‚úÖ –°–≤–æ–±–æ–¥–Ω–æ: {f_free_gb:.1f} GB –∏–∑ {f_total_gb:.1f} GB")
        
        if f_free_gb < 3:
            print(f"‚ö†Ô∏è  –ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ F: ({f_free_gb:.1f} GB < 3 GB)")
            return False
        
        
        test_dir = "F:/test_build_access"
        try:
            os.makedirs(test_dir, exist_ok=True)
            os.rmdir(test_dir)
            print("‚úÖ –ï—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫")
        except Exception as e:
            print(f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫: {e}")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ F: –¥–∏—Å–∫–∞: {e}")
        return False

def upload_to_fileio(file_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –Ω–∞ file.io"""
    try:
        with open(file_path, 'rb') as f:
            files = {'file': f}
            response = requests.post('https://file.io', files=files, timeout=60)
            
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                return data.get('link')
        
        return None
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ file.io: {e}")
        return None

def message_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    username = update.effective_user.username or "Unknown"
    text = update.message.text
    
    user_data = get_user_data(user_id)
    status = user_data.get('status', '')
    
    if text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        start_handler(update, context)
        return
    
    if text == "üìã –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã":
        functions_handler(update, context)
        return
    
    if text == "üîë –í–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞":
        token_input_handler(update, context)
        return
    
    if text == "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        support_text = """
üí¨ –ü–û–î–î–ï–†–ñ–ö–ê

üìß –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏:
‚Ä¢ Telegram: @nocock
‚Ä¢ Email: support@example.com

üîß –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:
‚Ä¢ –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞? - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @BotFather
‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è? - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É Python
‚Ä¢ –ê–Ω—Ç–∏–≤–∏—Ä—É—Å –±–ª–æ–∫–∏—Ä—É–µ—Ç? - –¥–æ–±–∞–≤—å—Ç–µ –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è

‚è∞ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: –æ–±—ã—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤
        """
        update.message.reply_text(support_text)
        return
    
    
    if status == 'waiting_token':
        token = text.strip()
        
        update.message.reply_text("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —Ç–æ–∫–µ–Ω...")
        
        if validate_token(token):
            user_data['token'] = token
            user_data['status'] = 'token_validated'
            set_user_data(user_id, user_data)
            
            
            keyboard = [
                [InlineKeyboardButton("üì¶ ZIP –∞—Ä—Ö–∏–≤", callback_data="get_zip")],
                [InlineKeyboardButton("‚öôÔ∏è EXE —Ñ–∞–π–ª", callback_data="get_exe")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            success_text = f"""
‚úÖ –¢–æ–∫–µ–Ω –ø—Ä–∏–Ω—è—Ç!

ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:
‚Ä¢ –¢–æ–∫–µ–Ω: {token[:10]}...
‚Ä¢ –í–∞—à ID: {user_id}

–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã:

üì¶ ZIP –∞—Ä—Ö–∏–≤ - –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã Python
‚öôÔ∏è EXE —Ñ–∞–π–ª - –≥–æ—Ç–æ–≤–∞—è –∫ –∑–∞–ø—É—Å–∫—É –ø—Ä–æ–≥—Ä–∞–º–º–∞

–û–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –±—É–¥—É—Ç –∑–∞—â–∏—â–µ–Ω—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º.
            """
            
            update.message.reply_text(success_text, reply_markup=reply_markup)
            
        else:
            keyboard = [[KeyboardButton("üîë –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑")], [KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            error_text = """
‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω!

–¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤–∏–¥:
1234567890:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:
‚Ä¢ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –ª–∏ —Ç–æ–∫–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é
‚Ä¢ –ù–µ—Ç –ª–∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
‚Ä¢ –ê–∫—Ç–∏–≤–µ–Ω –ª–∏ –±–æ—Ç (–Ω–∞–ø–∏—à–∏—Ç–µ –µ–º—É /start)

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:
            """
            
            update.message.reply_text(error_text, reply_markup=reply_markup)
    
    else:
        
        keyboard = [
            [KeyboardButton("üìã –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã")],
            [KeyboardButton("üîë –í–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        update.message.reply_text(
            "‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:",
            reply_markup=reply_markup
        )

def send_exe_file(context, user_id, exe_path, query):
   """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ EXE —Ñ–∞–π–ª–∞"""
   try:
       file_size_mb = os.path.getsize(exe_path) / (1024 * 1024)
       
       
       if file_size_mb < 50:
           query.edit_message_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª —á–µ—Ä–µ–∑ Telegram...")
           
           try:
               with open(exe_path, 'rb') as f:
                   context.bot.send_document(
                       chat_id=user_id,
                       document=f,
                       filename=f'PCController_{user_id}.exe',
                       caption=f"""
‚öôÔ∏è –í–∞—à PC Controller –≥–æ—Ç–æ–≤!

üìè –†–∞–∑–º–µ—Ä: {file_size_mb:.1f} MB
üìã –ó–∞–ø—É—Å–∫–∞–π—Ç–µ –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
üîí –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                       """,
                       timeout=300
                   )
               
               return True
               
           except Exception as e:
               logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram: {e}")
               
               pass
       
       
       query.edit_message_text("üì§ –ó–∞–≥—Ä—É–∂–∞—é –Ω–∞ file.io...")
       download_link = upload_to_fileio(exe_path)
       
       if download_link:
           success_message = f"""
‚öôÔ∏è –í–∞—à EXE —Ñ–∞–π–ª –≥–æ—Ç–æ–≤!

üîó –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:
{download_link}

üìè –†–∞–∑–º–µ—Ä: {file_size_mb:.1f} MB
‚ö†Ô∏è –§–∞–π–ª —É–¥–∞–ª–∏—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è!
üìã –ó–∞–ø—É—Å–∫–∞–π—Ç–µ –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
üîí –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
           """
           
           context.bot.send_message(
               chat_id=user_id,
               text=success_message
           )
           
           return True
       else:
           query.edit_message_text("""
‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª.

üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
1. –ó–∞–ø—Ä–æ—Å–∏—Ç—å ZIP –∞—Ä—Ö–∏–≤
2. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ
3. –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
           """)
           
           return False
           
   except Exception as e:
       logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ EXE —Ñ–∞–π–ª–∞: {e}")
       query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {str(e)[:100]}")
       return False

def button_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if data == "main_menu":
        
        query.edit_message_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        start_handler(query, context)
        return
    
    user_data = get_user_data(user_id)
    token = user_data.get('token')
    
    if not token:
        query.edit_message_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
        return
    
    if data == "get_zip":
        query.edit_message_text("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ ZIP –∞—Ä—Ö–∏–≤–∞...")
        
        
        zip_path, password = create_zip_package(user_id, token)
        
        if zip_path and os.path.exists(zip_path):
            try:
                
                with open(zip_path, 'rb') as f:
                    context.bot.send_document(
                        chat_id=user_id,
                        document=f,
                        filename=f'PCController_{user_id}.zip',
                        caption=f"""
üì¶ –í–∞—à PC Controller –≥–æ—Ç–æ–≤!

üîê –ü–∞—Ä–æ–ª—å –∞—Ä—Ö–∏–≤–∞: `{password}`
üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: main.py, HTML, JSON, requirements.txt

üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–∫–ª—é—á–µ–Ω–∞ –≤ –∞—Ä—Ö–∏–≤.
                        """,
                        parse_mode='Markdown'
                    )
                
                
                user_data['last_generation'] = datetime.now().isoformat()
                user_data['generation_count'] = user_data.get('generation_count', 0) + 1
                set_user_data(user_id, user_data)
                
                
                try:
                    context.bot.send_message(
                        chat_id=ADMIN_CHAT_ID,
                        text=f"‚úÖ ZIP —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è @{query.from_user.username} (ID: {user_id})"
                    )
                except:
                    pass
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ZIP: {e}")
                query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                
            finally:
                
                try:
                    temp_dir = os.path.dirname(zip_path)
                    shutil.rmtree(temp_dir)
                except:
                    pass
        else:
            query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
    elif data == "get_exe":
        query.edit_message_text("üîß –ü—Ä–æ–≤–µ—Ä—è—é Nuitka...")
        
        
        if not diagnose_nuitka_issues():
            if not fix_nuitka_install():
                query.edit_message_text("‚ùå Nuitka –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ ZIP –∞—Ä—Ö–∏–≤ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
                return
        
        query.edit_message_text("‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ EXE —Å Nuitka... (3-5 –º–∏–Ω—É—Ç)")
        
        try:
            exe_path = build_exe_for_user_f_drive_nuitka(user_id, token, use_f_drive=True)
            
            if exe_path and os.path.exists(exe_path):
                size_mb = os.path.getsize(exe_path) / (1024 * 1024)
                logging.info(f"–§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {exe_path}, —Ä–∞–∑–º–µ—Ä: {size_mb:.1f} MB")
                
                if send_exe_file(context, user_id, exe_path, query):
                    user_data['last_generation'] = datetime.now().isoformat()
                    user_data['generation_count'] = user_data.get('generation_count', 0) + 1
                    set_user_data(user_id, user_data)
            else:
                
                query.edit_message_text("‚öôÔ∏è Nuitka –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É—é PyInstaller...")
                fallback_exe = fallback_to_pyinstaller_optimized(user_id, token, temp_dir)
                
                if fallback_exe:
                    send_exe_file(context, user_id, fallback_exe, query)
                else:
                    query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ EXE. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ ZIP –∞—Ä—Ö–∏–≤.")
                    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è EXE: {e}")
            query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: –ø–æ–ø—Ä–æ–±—É–π—Ç–µ ZIP –∞—Ä—Ö–∏–≤")
        
        finally:
            cleanup_f_drive()

def error_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logging.error(f"–û—à–∏–±–∫–∞: {context.error}")

def admin_stats(update: Update, context: CallbackContext):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if update.effective_user.id != ADMIN_CHAT_ID:
        return
    
    total_users = len(users_data)
    active_users = len([u for u in users_data.values() if u.get('token')])
    total_generations = sum(u.get('generation_count', 0) for u in users_data.values())
    
    stats_text = f"""
üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {total_users}
‚úÖ –° —Ç–æ–∫–µ–Ω–∞–º–∏: {active_users}
‚öôÔ∏è –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {total_generations}

üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:
    """
    
    
    recent_users = sorted(
        users_data.items(),
        key=lambda x: x[1].get('last_generation', ''),
        reverse=True
    )[:5]
    
    for user_id, data in recent_users:
        if 'last_generation' in data:
            stats_text += f"\n‚Ä¢ {user_id}: {data.get('generation_count', 0)} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"
    
    update.message.reply_text(stats_text)

def main():

    
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not GENERATOR_BOT_TOKEN or GENERATOR_BOT_TOKEN == "YOUR_GENERATOR_BOT_TOKEN":
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ GENERATOR_BOT_TOKEN –≤ –∫–æ–¥–µ!")
        return
    
    if ADMIN_CHAT_ID == 123456789:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ADMIN_CHAT_ID –≤ –∫–æ–¥–µ!")
        return
    
    
    if not os.path.exists('pc_controller_template.py'):
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª pc_controller_template.py!")
        print("–ü–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ –≤–∞—à main.py –≤ pc_controller_template.py")
        return
    
    print("ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞...")

    if check_and_install_nuitka():
        print("Nuitka –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é - –±—ã—Å—Ç—Ä–∞—è —Å–±–æ—Ä–∫–∞ EXE")
    else:
        print("Nuitka –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥")

    if diagnose_nuitka_issues():
        print("–í—Å–µ —á–∏–∫–∏ –ø—É–∫–∏")
    else:
        fix_nuitka_install()

    cleanup_f_drive()

    
    load_users_data()
    
    
    updater = Updater(GENERATOR_BOT_TOKEN, use_context=True)
    dp = updater.dispatcher
    
    
    dp.add_handler(CommandHandler("start", start_handler))
    dp.add_handler(CommandHandler("stats", admin_stats))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, message_handler))
    dp.add_handler(CallbackQueryHandler(button_callback))
    dp.add_error_handler(error_handler)
    
    
    updater.start_polling()
    print("‚úÖ –ë–æ—Ç-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω!")
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(users_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    try:
        updater.idle()
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        updater.stop()


if __name__ == "__main__":
    main()
